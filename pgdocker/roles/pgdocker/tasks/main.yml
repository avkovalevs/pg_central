---
# tasks file for pgdocker
- name: "Create repos directory"
  file:
    path: "{{ repos }}"
    state: directory
    mode: 0700
  tags: pg
  
- name: "Clone repos for building and configuring images"
  git:
    repo: "{{ item.repos }}"
    dest: "{{ repos }}/{{ item.reponames }}"
    clone: yes
    update: no
  with_items:
  - { repos: 'https://github.com/xcrezd/pg-dock.git', reponames: 'pg-dock' }
  - { repos: 'https://github.com/xcrezd/pg-dock-conf.git', reponames: 'pg-dock-conf' }
  - { repos: 'https://github.com/xcrezd/pg-dock-base.git', reponames: 'pg-dock-base' }
  tags: pg

- name: "Create group"
  group:
    name: "{{ pggroup }}"
    gid: 5432
    state: present
  tags: pg

- name: "Add the user {{ pguser }}"
  user:
    name: "{{ pguser }}"
    shell: /bin/bash
    group: "{{ pggroup }}"
    home: "{{ pghome }}"
    create_home: yes
    uid: 5432
    state: present
  tags: pg

- name: "Replace pg_hba.conf on your own"
  copy: 
    src: "{{ role_path }}/files/pg_hba.conf"
    dest: "{{ item }}"
  with_items:
  - "{{ repos }}/pg-dock-conf/n1/postgres/pg_hba.conf"
  - "{{ repos }}/pg-dock-conf/n2/postgres/pg_hba.conf"
  tags: pg

- name: "Build images"
  shell: "{{ repos }}/pg-dock/build.sh"
  args:
    chdir: "{{ repos }}/pg-dock"
  environment:
    PG_DOCK_NODE: "n{{ groups['db'].index(inventory_hostname)+1 }}"
    PG_DOCK_CONF_IMAGE: "n{{ groups['db'].index(inventory_hostname)+1 }}v1"
  tags: pg
   
- name: "Update images"
  shell: "{{ repos }}/pg-dock/update.sh"
  args:
    chdir: "{{ repos }}/pg-dock"
  environment:
    PG_DOCK_CONF_IMAGE: "n{{ groups['db'].index(inventory_hostname)+1 }}v1"
  tags: pg

- name: "Run containers"
  shell: "/usr/local/bin/docker-compose up -d"
  args:
    chdir: "{{ repos }}/pg-dock"
  environment:
    PG_DOCK_NODE: "n{{ groups['db'].index(inventory_hostname)+1 }}"
  tags: pg

- block:
  - name: "Register master database"
    shell: "docker exec -it -u {{ pguser }} pg-dock repmgr master register"
    register: register_master
    when:
         - not pgsql_cluster_configured
    tags: pg
  
  - name: "Debug master register"
    debug:
      var: register_master
    tags: pg
  when: (not pgsql_cluster or pgsql_cluster_master)

- block:
  - name "Clone database from master to standby" 
    shell: "docker exec -it -u {{ pguser }} -e PG_DOCK_FROM=n1 pg-dock manage/repmgr_clone_standby.sh
    register: register_clone
    when:
         - not pgsql_cluster_configured
    tags: pg

  - name: "Debug clone"
    debug:
      var: register_clone
    tags: pg
     
  - name: "Register standby database"
    shell: "docker exec -it -u {{ pguser }} pg-dock repmgr standby register"
    register: register_standby
    when:
         - not pgsql_cluster_configured
    tags: pg

  - name: "Debug standby register"
    debug:
      var: register_standby
    tags: pg
  when: not pgsql_cluster_master
