---
# tasks file for pgdocker
- name: "Create repos directory"
  file:
    path: "{{ repos }}"
    state: directory
    mode: 0700
  tags: pg
  
- name: "Clone repos for building and configuring images"
  git:
    repo: "{{ item.repos }}"
    dest: "{{ repos }}/{{ item.reponames }}"
    clone: yes
    update: no
  with_items:
  - { repos: 'https://github.com/xcrezd/pg-dock.git', reponames: 'pg-dock' }
  - { repos: 'https://github.com/xcrezd/pg-dock-conf.git', reponames: 'pg-dock-conf' }
  - { repos: 'https://github.com/xcrezd/pg-dock-base.git', reponames: 'pg-dock-base' }
  tags: pg

- name: "Create group"
  group:
    name: "{{ pggroup }}"
    gid: 5432
    state: present
  tags: pg

- name: "Add the user {{ pguser }}"
  user:
    name: "{{ pguser }}"
    shell: /bin/bash
    group: "{{ pggroup }}"
    home: "{{ pghome }}"
    create_home: yes
    uid: 5432
    state: present
  tags: pg

- name: "Replace pg_hba.conf on your own"
  copy: 
    src: "{{ role_path }}/files/pg_hba.conf"
    dest: "{{ item }}"
  with_items:
  - "{{ repos }}/pg-dock-conf/n1/postgres/pg_hba.conf"
  - "{{ repos }}/pg-dock-conf/n2/postgres/pg_hba.conf"
  tags: pg

- name: "Replace repmgr.conf on master source"
  copy: 
    src: "{{ role_path }}/files/repmgr_master.conf"
    dest: "{{ repos }}/pg-dock-conf/n1/repmgr/repmgr.conf"
  tags: pg

- name: "Replace repmgr.conf on standby source"
  copy: 
    src: "{{ role_path }}/files/repmgr_standby.conf"
    dest: "{{ repos }}/pg-dock-conf/n2/repmgr/repmgr.conf"
  tags: pg

- name: "Build images"
  shell: "{{ repos }}/pg-dock/build.sh"
  args:
    chdir: "{{ repos }}/pg-dock"
  environment:
    PG_DOCK_NODE: "n{{ groups['db'].index(inventory_hostname)+1 }}"
    PG_DOCK_CONF_IMAGE: "n{{ groups['db'].index(inventory_hostname)+1 }}v1"
  tags: pg
   
- name: "Update images. Added scripts to images"
  shell: "{{ repos }}/pg-dock/update.sh"
  args:
    chdir: "{{ repos }}/pg-dock"
  environment:
    PG_DOCK_CONF_IMAGE: "n{{ groups['db'].index(inventory_hostname)+1 }}v1"
  tags: pg

- name: "Change compose file"
  copy: 
    src: "{{ role_path }}/files/docker-compose.stage.yml"
    dest: "{{ repos }}/pg-dock/docker-compose.yml"
  tags: pg

- name: "Run database containers"
  shell: "/usr/local/bin/docker-compose up -d"
  args:
    chdir: "{{ repos }}/pg-dock"
  environment:
    PG_DOCK_NODE: "n{{ groups['db'].index(inventory_hostname)+1 }}"
  tags: pg

- name: "Set default state of pgsql_cluster_configured"
  set_fact:
    pgsql_cluster_configured: false
  tags: pg

- name: "Get state of pgsql_cluster_configured from local facts"
  set_fact:
    pgsql_cluster_configured: "{{ ansible_local.pgsql.pgsql.cluster_configured }}"
  when:
    - ansible_local.pgsql is defined
    - ansible_local.pgsql.pgsql is defined
    - ansible_local.pgsql.pgsql.cluster_configured is defined
  tags: pg

- name: "Set pgsql_cluster_master"
  set_fact:
    pgsql_cluster_master: true
  when:
    - hostvars[inventory_hostname].pgsql_cluster_master is defined
    - hostvars[inventory_hostname].pgsql_cluster_master
  tags: pg

- name: "Determine master hostname"
  set_fact:
    pgsql_cluster_master_host: "{{ item }}"
  with_items: "{{ groups[pgsql_cluster_group_name] }}"
  when:
    - hostvars[item].pgsql_cluster_master is defined
    - hostvars[item].pgsql_cluster_master
  tags: pg

- name: "Hostname of PGSQL Master"
  debug:
    msg: "'{{ pgsql_cluster_master_host }}'"
  tags: pg

- block:
  - name: "Register master database"
    command: docker exec -it -u postgres pg-dock repmgr master register
    register: register_master
    when:
         - not pgsql_cluster_configured
    tags: pg
  
  - name: "Debug master register"
    debug:
      var: register_master
    tags: pg
  when: (not pgsql_cluster or pgsql_cluster_master)

- block:
  - name: "Clone database from master to standby" 
    command: docker exec -it -u postgres pg-dock -e PG_DOCK_FROM=n1 manage/repmgr_clone_standby.sh
    register: register_clone
    when:
         - not pgsql_cluster_configured
    tags: pg

  - name: "Debug clone"
    debug:
      var: register_clone
    tags: pg
     
  - name: "Register standby database"
    command: docker exec -it -u  postgres pg-dock repmgr standby register
    register: register_standby
    when:
         - not pgsql_cluster_configured
    tags: pg

  - name: "Debug standby register"
    debug:
      var: register_standby
    tags: pg
  when: not pgsql_cluster_master

- name: "Store host facts"
  blockinfile:
    dest: /etc/ansible/facts.d/pgsql.fact
    create: true
    block: |
      [pgsql]
      cluster_configured: true
  when: pgsql_cluster
  tags: pg
    
- name: "Reload ansible_local"
  setup:
    filter: ansible_local
  tags: pg

